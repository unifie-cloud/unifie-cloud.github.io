"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9978],{5717:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=n(4848),s=n(8453);const r={id:"CI-CD-integration",title:"CI/CD integration"},d=void 0,a={id:"User-Guide/CI-CD/CI-CD-integration",title:"CI/CD integration",description:"If you want to deploy a third party project \u2013 you can use helm chart with hardcoded application version.But for own developed project this way is not really good. I am sure you will have hundreds of different versions for your application, dev builds, production builds and a lot of other builds (in best case \u2013 dedicated build for each issue from Jira)",source:"@site/docs/02-User-Guide/06-CI-CD/index.md",sourceDirName:"02-User-Guide/06-CI-CD",slug:"/User-Guide/CI-CD/",permalink:"/doc/home/User-Guide/CI-CD/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"CI-CD-integration",title:"CI/CD integration"},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/doc/home/User-Guide/Variables/"},next:{title:"Private container registries",permalink:"/doc/home/User-Guide/Pull-Secrets/"}},o={},c=[{value:"How to get CI/CD API KEY",id:"how-to-get-cicd-api-key",level:2},{value:"How to use CI/CD API KEY",id:"how-to-use-cicd-api-key",level:2},{value:"CI/CD - API arguments",id:"cicd---api-arguments",level:2},{value:"Add a new version",id:"add-a-new-version",level:2},{value:"How to use version in template",id:"how-to-use-version-in-template",level:2},{value:"Docker service",id:"docker-service",level:4},{value:"Kubernetes yaml service",id:"kubernetes-yaml-service",level:4}];function l(e){const i={a:"a",code:"code",h2:"h2",h4:"h4",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"If you want to deploy a third party project \u2013 you can use helm chart with hardcoded application version.But for own developed project this way is not really good. I am sure you will have hundreds of different versions for your application, dev builds, production builds and a lot of other builds (in best case \u2013 dedicated build for each issue from Jira)"}),"\n",(0,t.jsx)(i.h2,{id:"how-to-get-cicd-api-key",children:"How to get CI/CD API KEY"}),"\n",(0,t.jsx)(i.p,{children:"To get api key \u2013 click here:"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"get ci/cd api key",src:n(7792).A+"",width:"1918",height:"410"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"get ci/cd api key",src:n(2864).A+"",width:"997",height:"147"})}),"\n",(0,t.jsx)(i.h2,{id:"how-to-use-cicd-api-key",children:"How to use CI/CD API KEY"}),"\n",(0,t.jsx)(i.p,{children:"CI/CD integration is a simple webhook. You can call it from you CI/CD pipeline to send to unifie information about your new build."}),"\n",(0,t.jsx)(i.p,{children:"Copy curl command example to you ci/cd pipeline.This code will work in gitlab pipeline."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"use ci/cd api key",src:n(5550).A+"",width:"977",height:"853"})}),"\n",(0,t.jsx)(i.p,{children:"This api call will add information about new build for project."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'export SERVICE_NAME=MY_SERVICE_NAME\nexport DOCKER_IMAGE_NAME=059920143366.dkr.ecr.us-east-1.amazonaws.com/docker-static-images:$CI_PIPELINE_ID\ncurl --user project214:af2******8pu \\\n--data-urlencode "projectId=214" \\\n--data-urlencode "title=$CI_COMMIT_TITLE" \\\n--data-urlencode "message=$CI_COMMIT_MESSAGE" \\\n"http://test.unifie.cloud/versions/update?channel=Prod&name=$CI_COMMIT_BRANCH&build=$CI_PIPELINE_ID&image=$SERVICE_NAME&url=$DOCKER_IMAGE_NAME"\n'})}),"\n",(0,t.jsx)(i.p,{children:"Execute it to send the first build."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"send-curl",src:n(4404).A+"",width:"740",height:"175"})}),"\n",(0,t.jsx)(i.h2,{id:"cicd---api-arguments",children:"CI/CD - API arguments"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Parameter"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"projectId"}),(0,t.jsx)(i.td,{children:"number"}),(0,t.jsx)(i.td,{children:"Id for your project, will not change."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"title"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsx)(i.td,{children:"New build title (It will be displayed in UI)"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"message"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsx)(i.td,{children:"New build description. In CI/CD it can be a commit message (It will be displayed in UI)"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"channel"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsx)(i.td,{children:"New build channel (Dev, Prod or other)"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"name"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsx)(i.td,{children:"New build name"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"image"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsx)(i.td,{children:"Service name in your application template."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"url"}),(0,t.jsx)(i.td,{children:"string"}),(0,t.jsxs)(i.td,{children:["Docker image URL. For example for AWS ECR it can looks like 059920143366.dkr.ecr.us-east-1.amazonaws.com/ docker-helloworld",":XXXX"," (Here XXXX is image tag)"]})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"add-a-new-version",children:"Add a new version"}),"\n",(0,t.jsx)(i.p,{children:"You can a new version for your app over UI or using API. If it is done - you can see it in this table."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"version-list",src:n(5089).A+"",width:"1920",height:"604"})}),"\n",(0,t.jsx)(i.h2,{id:"how-to-use-version-in-template",children:"How to use version in template"}),"\n",(0,t.jsx)(i.p,{children:"After you create at least one version. You can go to version tab and select version for the application."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"use version",src:n(7472).A+"",width:"1920",height:"519"})}),"\n",(0,t.jsxs)(i.p,{children:["It is the first part of your work. Selected version - just one more ",(0,t.jsx)(i.a,{href:"https://www.unifie.cloud/doc/docs/User-Guide/Variables/",children:"variable"}),". You have to use the value of this variable in you deployment."]}),"\n",(0,t.jsx)(i.h4,{id:"docker-service",children:"Docker service"}),"\n",(0,t.jsxs)(i.p,{children:["If you use a ",(0,t.jsx)(i.a,{href:"https://www.unifie.cloud/doc/docs/User-Guide/Unifie-Service-Types/Docker/",children:"Docker type service"})," just mark this element"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"version-for-wizard",src:n(3058).A+"",width:"1920",height:"715"})}),"\n",(0,t.jsx)(i.h4,{id:"kubernetes-yaml-service",children:"Kubernetes yaml service"}),"\n",(0,t.jsxs)(i.p,{children:["Here ",(0,t.jsx)(i.code,{children:"UnifieVar.image.test"})," the full ",(0,t.jsx)(i.a,{href:"https://www.unifie.cloud/doc/docs/User-Guide/Variables/",children:"variable name"}),", ",(0,t.jsx)(i.code,{children:"test"})," is the service name (parameter ",(0,t.jsx)(i.code,{children:"name"})," in api call)"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx-test2\n          image: "{{ .UnifieVar.image.test }}"\n          ports:\n            - containerPort: 80\n'})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5550:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/get-key-use-470bcabce8a01e268bbb2cc1ea2240ad.png"},7792:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/get-key-af557fc1c5f8bd9ce6f77d24b57bda5f.png"},2864:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/get-key2-6172f0bbe088d423753ce9d327cad875.png"},4404:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/send-curl-50544bd21d5d4e832eb61c4cf2d83287.webp"},7472:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/use-version-bc46d00353b6685a65f28ee8b03fb51b.png"},3058:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/version-for-wizard-2baec6a6720f060ed0f6c62e0484bff1.png"},5089:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/version-list-af9f33df089888a8da29f8ff988f58d5.png"},8453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>a});var t=n(6540);const s={},r=t.createContext(s);function d(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);